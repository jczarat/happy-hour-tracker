{"version":3,"sources":["components/NavBar/NavBar.jsx","utils/tokenService.js","utils/userService.js","components/SignupForm/SignupForm.jsx","pages/SignupPage/SignupPage.jsx","pages/LoginPage/LoginPage.jsx","pages/App/App.js","serviceWorker.js","index.js"],"names":["NavBar","props","nav","user","className","name","to","onClick","handleLogout","exact","setToken","token","localStorage","setItem","getToken","getUserFromToken","JSON","parse","atob","split","removeToken","removeItem","getItem","exp","Date","now","BASE_URL","signup","fetch","method","headers","Headers","body","stringify","then","res","ok","json","Error","tokenService","getUser","logout","login","creds","SignupForm","state","email","password","passwordConf","handleChange","e","updateMessage","setState","target","value","handleSubmit","a","preventDefault","userService","handleSignupOrLogin","history","push","message","this","onSubmit","type","placeholder","onChange","disabled","isFormInvalid","Component","SignupPage","msg","LoginPage","pw","alert","App","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.db5312c1.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst NavBar = (props) => {\n    let nav = props.user ?\n        <div>\n        <span className='NavBar-welcome'>WELCOME, {props.user.name}</span>\n        &nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n        <NavLink to='' onClick={props.handleLogout} className='NavBar-link'>LOG OUT</NavLink>\n        </div>\n        :\n        <div>\n            <NavLink exact to=\"/\">HOME</NavLink> &nbsp;&nbsp;|&nbsp;&nbsp;\n            <NavLink exact to=\"/show\">SHOW PAGE</NavLink> &nbsp;&nbsp;|&nbsp;&nbsp;\n            <NavLink to='/login' className='NavBar-link'>LOG IN</NavLink> &nbsp;&nbsp;|&nbsp;&nbsp;\n        <NavLink to='/signup' className='NavBar-link'>SIGN UP</NavLink>\n        </div>;\n\n    return (\n        <div className='NavBar'>\n            {nav}\n        </div>\n    );\n};\n\nexport default NavBar","export default {\n  setToken,\n  getToken,\n  getUserFromToken,\n  removeToken,\n};\n\nfunction removeToken() {\n  localStorage.removeItem('token');\n}\n\nfunction getUserFromToken() {\n  const token = getToken();\n  return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n}\n\nfunction getToken() {\n  let token = localStorage.getItem('token');\n  if (token) {\n    // Check if expired, remove if it is\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    if (payload.exp < Date.now() / 1000) {\n      localStorage.removeItem('token');\n      token = null;\n    }\n  }\n  return token;\n}\n\nfunction setToken(token) {\n  localStorage.setItem('token', token);\n}\n\n","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/users/';\n\nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(user)\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    // Probably a duplicate email\n    throw new Error('Email already taken!');\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(creds)\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    // Probably a duplicate email\n    throw new Error('Bad Credentials!');\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\nexport default {\n  signup,\n  getUser,\n  logout,\n  login\n};","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport userService from '../../utils/userService';\n\nclass SignupForm extends Component {\n\n  state = {\n    name: '',\n    email: '',\n    password: '',\n    passwordConf: ''\n  };\n\n  handleChange = (e) => {\n    this.props.updateMessage('');\n    this.setState({\n      // Using ES2015 Computed Property Names\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await userService.signup(this.state);\n      this.props.handleSignupOrLogin();\n      // Successfully signed up - show GamePage\n      this.props.history.push('/');\n    } catch (err) {\n      // Invalid user data (probably duplicate email)\n      this.props.updateMessage(err.message);\n    }\n  }\n\n  isFormInvalid() {\n    return !(this.state.name && this.state.email && this.state.password === this.state.passwordConf);\n  }\n\n  render() {\n    return (\n      <div>\n        <header className=\"header-footer\">Sign Up</header>\n        <form className=\"form-horizontal\" onSubmit={this.handleSubmit} >\n          <div className=\"form-group\">\n            <div className=\"col-sm-12\">\n              <input type=\"text\" className=\"form-control\" placeholder=\"Name\" value={this.state.name} name=\"name\" onChange={this.handleChange} />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <div className=\"col-sm-12\">\n              <input type=\"email\" className=\"form-control\" placeholder=\"Email\" value={this.state.email} name=\"email\" onChange={this.handleChange} />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <div className=\"col-sm-12\">\n              <input type=\"password\" className=\"form-control\" placeholder=\"Password\" value={this.state.password} name=\"password\" onChange={this.handleChange} />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <div className=\"col-sm-12\">\n              <input type=\"password\" className=\"form-control\" placeholder=\"Confirm Password\" value={this.state.passwordConf} name=\"passwordConf\" onChange={this.handleChange} />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <div className=\"col-sm-12 text-center\">\n              <button className=\"btn btn-default\" disabled={this.isFormInvalid()}>Sign Up</button>&nbsp;&nbsp;\n              <Link to='/'>Cancel</Link>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SignupForm;\n","import React, { Component } from 'react';\nimport SignupForm from '../../components/SignupForm/SignupForm';\nimport './SignupPage.css';\n\nclass SignupPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {message: ''}\n  }\n\n  updateMessage = (msg) => {\n    this.setState({message: msg});\n  }\n\n  render() {\n    return (\n      <div className='SignupPage'>\n        <SignupForm {...this.props} updateMessage={this.updateMessage} />\n        <p>{this.state.message}</p>\n      </div>\n    );\n  }\n}\n\nexport default SignupPage;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './LoginPage.css';\nimport userService from '../../utils/userService';\n\nclass LoginPage extends Component {\n  \n  state = {\n    email: '',\n    pw: ''\n  };\n\n  handleChange = (e) => {\n    // Implement in an elegant way\n    this.setState({\n      // Using Computed Property Names\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await userService.login(this.state);\n      this.props.handleSignupOrLogin();\n      // Successfully signed up - show GamePage\n      this.props.history.push('/');\n    } catch (err) {\n      // Do not alert in your projects,\n      // show a modal or some UI instead\n      alert('Invalid login');\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"LoginPage\">\n        <header className=\"header-footer\">Log In</header>\n        <form className=\"form-horizontal\" onSubmit={this.handleSubmit} >\n          <div className=\"form-group\">\n            <div className=\"col-sm-12\">\n              <input type=\"email\" className=\"form-control\" placeholder=\"Email\" value={this.state.email} name=\"email\" onChange={this.handleChange} />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <div className=\"col-sm-12\">\n              <input type=\"password\" className=\"form-control\" placeholder=\"Password\" value={this.state.pw} name=\"pw\" onChange={this.handleChange} />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <div className=\"col-sm-12 text-center\">\n              <button className=\"btn btn-default\">Log In</button>&nbsp;&nbsp;&nbsp;\n              <Link to='/'>Cancel</Link>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default LoginPage;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport NavBar from '../../components/NavBar/NavBar';\nimport SignupPage from '../SignupPage/SignupPage';\nimport LoginPage from '../LoginPage/LoginPage';\nimport userService from '../../utils/userService';\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            user: userService.getUser()\n        };\n    }\n\n    handleLogout = () => {\n        userService.logout();\n        this.setState({ user: null });\n    }\n\n    handleSignupOrLogin = () => {\n        this.setState({ user: userService.getUser() });\n    }\n\n    render() {\n        return (\n\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    Auth Template\n                    <nav>\n                        <NavBar\n                            user={this.state.user}\n                            handleLogout={this.handleLogout}\n                        />\n                    </nav>\n                </header>\n\n                <Switch>\n                    <Route exact path='/' render={() =>\n                        <h1>Home Page</h1>\n                    } />\n                    <Route exact path='/show' render={() =>\n                        <h1>Show Page</h1>\n                    } />\n                    <Route exact path='/signup' render={({ history }) =>\n                        <SignupPage\n                            history={history}\n                            handleSignupOrLogin={this.handleSignupOrLogin}\n                        />\n                    } />\n                    <Route exact path='/login' render={({ history }) =>\n                        <LoginPage\n                            handleSignupOrLogin={this.handleSignupOrLogin}\n                            history={history}\n                        />\n                    } />\n                </Switch>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root')\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}